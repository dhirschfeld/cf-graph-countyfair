{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/6c1e778d-adaa-4acb-8f6f-fdbe1489bc8a.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":2,
    "migrator_version":0,
    "name":"boost172"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/426882627.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"librdkafka14"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/734c329f-54d4-46b9-adea-2d658c59a065.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"arrow_cpp0171"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived":false,
 "bad":"Upstream: Could not find version on github",
 "conda-forge.yml":{},
 "feedstock_name":"omniscidb",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
   "dev_url":"https://github.com/omnisci/omniscidb",
   "doc_url":"https://www.omnisci.com/docs/latest/",
   "home":"https://www.omnisci.com/",
   "license":"Apache-2.0",
   "license_family":"APACHE",
   "license_file":"LICENSE.md",
   "summary":"The OmniSci database"
  },
  "build":{
   "missing_dso_whitelist":null,
   "number":"1",
   "skip":true,
   "string":"h_1_cpu",
   "track_features":null
  },
  "extra":{
   "recipe-maintainers":[
    "xmnlab",
    "pearu",
    "andrewseidl",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "xmnlab",
    "pearu",
    "andrewseidl"
   ]
  },
  "package":{
   "name":"omniscidb",
   "version":"5.2.2"
  },
  "requirements":{
   "build":[
    "cgo_compiler_stub",
    "cxx_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "llvmdev 9",
    "make",
    "maven",
    "cgo_compiler_stub",
    "cxx_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "llvmdev 9",
    "make",
    "maven",
    "cgo_compiler_stub",
    "cxx_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "llvmdev 9",
    "make",
    "maven"
   ],
   "host":[
    "arrow-cpp =0.16.*=*cpu",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "llvmdev 9",
    "llvm",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka <1.4",
    "ncurses",
    "openldap",
    "openssl",
    "snappy",
    "thrift-cpp",
    "arrow-cpp =0.16.*=*cpu",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "llvmdev 9",
    "llvm",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka <1.4",
    "ncurses",
    "openldap",
    "openssl",
    "snappy",
    "thrift-cpp",
    "arrow-cpp =0.16.*=*cpu",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "llvmdev 9",
    "llvm",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka <1.4",
    "ncurses",
    "openldap",
    "openssl",
    "snappy",
    "thrift-cpp"
   ],
   "run":[
    "boost-cpp",
    "bzip2",
    "gxx_",
    "ncurses",
    "openjdk 8",
    "xz",
    "zlib",
    "boost-cpp",
    "bzip2",
    "gxx_",
    "ncurses",
    "openjdk 8",
    "xz",
    "zlib",
    "boost-cpp",
    "bzip2",
    "gxx_",
    "ncurses",
    "openjdk 8",
    "xz",
    "zlib"
   ],
   "run_constrained":[
    "arrow-cpp-proc * cpu",
    "arrow-cpp-proc * cpu",
    "arrow-cpp-proc * cpu"
   ]
  },
  "source":{
   "patches":[
    "skip-boost-libs-install.patch",
    "skip-boost-libs-install.patch",
    "skip-boost-libs-install.patch"
   ],
   "sha256":"7587ee6dfd900dc23b1ba1f6357c94bf65a997a25e21ee364b3e5d871dddd6fc",
   "url":"https://github.com/omnisci/omniscidb/archive/v5.2.2.tar.gz"
  },
  "test":{
   "commands":[
    "test -f \"${PREFIX}/etc/conda/activate.d/_activate.sh\"",
    "test -f \"${PREFIX}/etc/conda/deactivate.d/_deactivate.sh\"",
    "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/_activate.sh\n",
    "omnisql -v",
    "which omnisci_initdb",
    "which omnisci_server",
    "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
    "which omnisci_insert_sample_data",
    "which startomnisci",
    "test -f \"${PREFIX}/etc/conda/activate.d/_activate.sh\"",
    "test -f \"${PREFIX}/etc/conda/deactivate.d/_deactivate.sh\"",
    "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/_activate.sh\n",
    "omnisql -v",
    "which omnisci_initdb",
    "which omnisci_server",
    "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
    "which omnisci_insert_sample_data",
    "which startomnisci",
    "test -f \"${PREFIX}/etc/conda/activate.d/_activate.sh\"",
    "test -f \"${PREFIX}/etc/conda/deactivate.d/_deactivate.sh\"",
    "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/_activate.sh\n",
    "omnisql -v",
    "which omnisci_initdb",
    "which omnisci_server",
    "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
    "which omnisci_insert_sample_data",
    "which startomnisci"
   ]
  }
 },
 "name":"omniscidb",
 "new_version":"5.3.0",
 "new_version_attempts":{
  "5.3.0":5
 },
 "new_version_errors":{},
 "pinning_version":"2020.06.02.12.20.38",
 "raw_meta_yaml":"{% set version = \"5.2.2\" %}\n{% set number = \"1\" %}\n{% set cuda_enabled = cuda_compiler_version is not undefined and cuda_compiler_version == '9.2' %}\n{% set build_ext_version = \"1.0.0\" %}\n{% set build_ext = \"cuda\" if cuda_enabled else \"cpu\" %}\n{% set build_string = \"h{}_{}_{}\".format(PKG_HASH, number, build_ext) %}\n\npackage:\n  name: omniscidb\n  version: {{ version }}\n\nsource:\n  url: https://github.com/omnisci/omniscidb/archive/v{{ version }}.tar.gz\n  sha256: 7587ee6dfd900dc23b1ba1f6357c94bf65a997a25e21ee364b3e5d871dddd6fc\n  patches:\n    - skip-boost-libs-install.patch\n\nbuild:\n  number: {{ number }}\n  string: \"{{ build_string }}\"\n  skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"9.2\")]\n  skip: true  # [not linux64]\n  missing_dso_whitelist:\n    - \"*/libcuda.*\"  # [cuda_compiler_version not in (undefined, \"None\")]\n  track_features:\n    {{ \"- arrow-cuda\" if cuda_enabled else \"\" }}\n\nrequirements:\n  build:\n    - {{ compiler('cgo') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler(\"cuda\") }}  # [cuda_compiler_version not in (undefined, \"None\")]\n    # omniscidb <=5.2.2 is not llvm 10+ ready\n    - clangdev\n    # clang++ is used for generating the bytecodes of extension functions\n    - clangxx\n    - cmake\n    - llvmdev 9\n    - make\n    - maven\n  host:\n    # omniscidb <=5.2.2 is not arrow-cpp 0.17+ ready\n    - arrow-cpp =0.16.*=*{{ build_ext }}\n    - bisonpp\n    - blosc\n    - boost-cpp\n    - clangdev\n    - double-conversion\n    - flex\n    - gflags\n    - glog\n    - llvmdev 9\n    - llvm\n    - libarchive\n    - libgdal\n    - libkml\n    - libpng\n    # for some reason, librdkafka 1.4+ triggers dependency conflicts\n    - librdkafka <1.4\n    - ncurses\n    - openldap\n    - openssl\n    - snappy\n    - thrift-cpp\n  run:\n    - boost-cpp\n    - bzip2\n    # omnscidb Load-time UDF support calls clang++\n    - gxx_{{ target_platform }}\n    - ncurses\n    - openjdk 8\n    - xz\n    - zlib\n  run_constrained:\n    - arrow-cpp-proc * {{ build_ext }}\n    - cudatoolkit >=9.2  # [cuda_compiler_version not in (undefined, \"None\")]\n\ntest:\n  commands:\n    # Verify the activation scripts are in-place.\n    {% for state in [\"activate\", \"deactivate\"] %}\n    - test -f \"${PREFIX}/etc/conda/{{ state }}.d/{{ PKG_NAME }}_{{ state }}.sh\"\n    {% endfor %}\n    # Try using the activation scripts.\n    - |\n      if [[ -x \"$(command -v omnisql)\" ]]\n      then\n        echo \"Found omnisql in PATH\"\n      else\n        echo \"omnisql not found in PATH(=$PATH)\" && exit 1\n      fi\n      source ${PREFIX}/etc/conda/deactivate.d/{{ PKG_NAME }}_deactivate.sh\n      if [[ -x \"$(command -v omnisql)\" ]]\n      then\n        echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\n      else\n        echo \"omnisql not in PATH after deactivation\"\n      fi\n      source ${PREFIX}/etc/conda/activate.d/{{ PKG_NAME }}_activate.sh\n    # Test installation\n    - omnisql -v\n    - which omnisci_initdb\n    - which omnisci_server\n    - |\n      if [ -x \"$(command -v nvidia-smi)\" ]; then  # [cuda_compiler_version not in (undefined, \"None\")]\n        mkdir data && omnisci_initdb data\n        omnisci_server --version\n        rm -rf data\n      fi                                          # [cuda_compiler_version not in (undefined, \"None\")]\n    - which omnisci_insert_sample_data\n    - which startomnisci\n\nabout:\n  home: https://www.omnisci.com/\n  license: Apache-2.0\n  license_family: APACHE\n  license_file: LICENSE.md\n  summary: 'The OmniSci database'\n\n  description: |\n    OmniSciDB is an in-memory, column store, SQL relational database\n    that was designed from the ground up to run on GPUs.\n\n    This recipe provides both CUDA enabled and CUDA disabled omniscidb\n    packages.\n  doc_url: https://www.omnisci.com/docs/latest/\n  dev_url: https://github.com/omnisci/omniscidb\n\nextra:\n  recipe-maintainers:\n    - xmnlab\n    - pearu\n    - andrewseidl\n",
 "req":{
  "__set__":true,
  "elements":[
   "arrow-cpp",
   "bisonpp",
   "blosc",
   "boost-cpp",
   "bzip2",
   "cgo_compiler_stub",
   "clangdev",
   "clangxx",
   "cmake",
   "cxx_compiler_stub",
   "double-conversion",
   "flex",
   "gflags",
   "glog",
   "gxx_",
   "libarchive",
   "libgdal",
   "libkml",
   "libpng",
   "librdkafka",
   "llvm",
   "llvmdev",
   "make",
   "maven",
   "ncurses",
   "openjdk",
   "openldap",
   "openssl",
   "snappy",
   "thrift-cpp",
   "xz",
   "zlib"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "cgo_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "cxx_compiler_stub",
    "llvmdev",
    "make",
    "maven"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "arrow-cpp",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka",
    "llvm",
    "llvmdev",
    "ncurses",
    "openldap",
    "openssl",
    "snappy",
    "thrift-cpp"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "boost-cpp",
    "bzip2",
    "gxx_",
    "ncurses",
    "openjdk",
    "xz",
    "zlib"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.3\n",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "cgo_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "cxx_compiler_stub",
    "llvmdev 9",
    "make",
    "maven"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "arrow-cpp =0.16.*=*cpu",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka <1.4",
    "llvm",
    "llvmdev 9",
    "ncurses",
    "openldap",
    "openssl",
    "snappy",
    "thrift-cpp"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "boost-cpp",
    "bzip2",
    "gxx_",
    "ncurses",
    "openjdk 8",
    "xz",
    "zlib"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/omnisci/omniscidb/archive/v5.2.2.tar.gz",
 "version":"5.2.2"
}