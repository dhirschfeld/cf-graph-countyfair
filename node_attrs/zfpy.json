{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/336088076.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"python38"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/392745609.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"MigrationYaml",
    "migrator_object_version":1,
    "migrator_version":0,
    "name":"pypy"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR":{
    "__lazy_json__":"pr_json/440974344.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"ArchRebuild",
    "migrator_version":1,
    "name":"aarch64 and ppc64le addition"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived":false,
 "bad":"Upstream: Could not find version on github",
 "conda-forge.yml":{
  "provider":{
   "linux_aarch64":"default",
   "linux_ppc64le":"default"
  }
 },
 "feedstock_name":"zfpy",
 "hash_type":"sha256",
 "meta_yaml":{
  "about":{
   "description":"zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
   "dev_url":"https://github.com/LLNL/zfp",
   "doc_url":"http://zfp.readthedocs.io/en/release0.5.5/",
   "home":"https://computation.llnl.gov/projects/floating-point-compression",
   "license":"BSD 3-Clause Modified",
   "license_family":"BSD",
   "license_file":"LICENSE",
   "summary":"Library for compressed numerical arrays that support high throughput read and write random access"
  },
  "build":{
   "number":"1",
   "rpaths":[
    "lib/"
   ],
   "run_exports":[
    "zfp",
    "zfp",
    "zfp"
   ],
   "script":"source ${RECIPE_DIR}/build_zfp.sh"
  },
  "extra":{
   "recipe-maintainers":[
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk",
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk",
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk"
   ]
  },
  "outputs":[
   {
    "name":"zfp"
   },
   {
    "build":{
     "script":"\\bld_zfpy.bat"
    },
    "name":"zfpy",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host":[
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run":[
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test":{
     "imports":[
      "zfpy"
     ]
    }
   },
   {
    "name":"zfp"
   },
   {
    "build":{
     "script":"source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name":"zfpy",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host":[
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run":[
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test":{
     "imports":[
      "zfpy"
     ]
    }
   },
   {
    "name":"zfp"
   },
   {
    "build":{
     "script":"source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name":"zfpy",
    "requirements":{
     "build":[
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host":[
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run":[
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test":{
     "imports":[
      "zfpy"
     ]
    }
   }
  ],
  "package":{
   "name":"zfp",
   "version":"0.5.5"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "libgomp"
   ],
   "host":[
    "libgomp"
   ]
  },
  "source":{
   "patches":[
    "100-update-cmake.patch",
    "100-update-cmake.patch",
    "100-update-cmake.patch"
   ],
   "sha256":"6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4",
   "url":"https://github.com/LLNL/zfp/archive/0.5.5.tar.gz"
  },
  "test":{
   "commands":[
    "if not exist %LIBRARY_INC%\\zfp.h exit 1",
    "if not exist %LIBRARY_BIN%\\zfp.dll exit 1",
    "if not exist %LIBRARY_LIB%\\zfp.lib exit 1",
    "where zfp",
    "test -f $PREFIX/include/zfp.h",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp",
    "test -f $PREFIX/include/zfp.h",
    "test -f $PREFIX/lib/libzfp.so.0.5.5",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp"
   ]
  }
 },
 "name":"zfp",
 "new_version":"0.5.5",
 "outputs_names":[
  "zfp",
  "zfpy"
 ],
 "pinning_version":"2020.06.24.16.31.11",
 "raw_meta_yaml":"{% set version = \"0.5.5\" %}\n\n# This package builds 2 outputs\n#    zfp     --- C headers\n#    zfpy    --- Python package\n#\n# The build procedure actually rebuilds zfp when zfpy is being built\n# during the install phase, conda will simply ignore all the files\n# that are being copied related to zfp since they already exist in the prefix\n\npackage:\n  name: zfp\n  version: {{ version }}\n\nsource:\n  url: https://github.com/LLNL/zfp/archive/{{ version }}.tar.gz\n  sha256: 6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4\n  patches:\n    - 100-update-cmake.patch\n\nbuild:\n  number: 1\n  script: source ${RECIPE_DIR}/build_zfp.sh  # [unix]\n  script: {{ RECIPE_DIR }}\\bld_zfp.bat       # [win]\n  run_exports:\n    # No real information, for now, let keep the defaults\n    - {{ pin_subpackage('zfp') }}\n  rpaths:\n    - lib/  # [unix]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make     # [unix]\n    - ninja    # [win]\n    - libgomp  # [linux]\n  host:\n    - libgomp  # [linux]\n\ntest:\n  commands:\n    - test -f $PREFIX/include/zfp.h                # [unix]\n    - if not exist %LIBRARY_INC%\\zfp.h exit 1      # [win]\n    - test -f $PREFIX/lib/libzfp.so.{{ version }}  # [linux]\n    - test -f $PREFIX/lib/libzfp${SHLIB_EXT}       # [unix]\n    - if not exist %LIBRARY_BIN%\\zfp.dll exit 1    # [win]\n    - if not exist %LIBRARY_LIB%\\zfp.lib exit 1    # [win]\n    # Command always returns 1\n    - which zfp  # [unix]\n    - where zfp  # [win]\n\noutputs:\n  - name: zfp\n  - name: zfpy\n    build:\n      script: source ${RECIPE_DIR}/build_zfpy.sh  # [unix]\n      script: {{ RECIPE_DIR }}\\bld_zfpy.bat       # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - make     # [unix]\n        - ninja    # [win]\n      host:\n        - python\n        - numpy\n        - cython\n        - {{ pin_subpackage('zfp', exact=True) }}\n      run:\n        - python\n        - {{ pin_compatible('numpy') }}\n        # I don't think run exports work with pin exact subpackage\n        - {{ pin_subpackage('zfp', exact=True) }}\n    test:\n      imports:\n        - zfpy\n\nabout:\n  home: https://computation.llnl.gov/projects/floating-point-compression\n  license: BSD 3-Clause Modified\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'Library for compressed numerical arrays that support high throughput read and write random access'\n  description: |\n    zfp is an open source C/C++ library for compressed numerical arrays\n    that support high throughput read and write random access. zfp also\n    supports streaming compression of integer and floating-point data,\n    e.g., for applications that read and write large data sets to and\n    from disk. zfp is primarily written in C and C++ but also includes\n    Python and Fortran bindings.\n  doc_url: http://zfp.readthedocs.io/en/release0.5.5/\n  dev_url: https://github.com/LLNL/zfp\n\nextra:\n  recipe-maintainers:\n    - kmpaul\n    - ToreAad\n    - lindstro\n    - GarrettDMorrison\n    - hmaarrfk\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "cmake",
   "cxx_compiler_stub",
   "cython",
   "libgomp",
   "make",
   "ninja",
   "numpy",
   "python",
   "zfp"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "libgomp",
    "make",
    "ninja"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "libgomp",
    "numpy",
    "python",
    "zfp"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "numpy",
    "python",
    "zfp"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.3\n",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "libgomp",
    "make",
    "ninja"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "libgomp",
    "numpy",
    "python",
    "zfp"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "numpy",
    "python",
    "zfp"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/LLNL/zfp/archive/0.5.5.tar.gz",
 "version":"0.5.5"
}